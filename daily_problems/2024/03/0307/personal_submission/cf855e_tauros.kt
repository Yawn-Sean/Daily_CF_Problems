import java.io.InputStream
import java.io.Writer
import java.io.OutputStreamWriter
import java.io.BufferedWriter
import java.io.OutputStream
import java.io.PrintWriter
import java.io.Closeable

open class FastReader(private val input: InputStream, bufCap: Int = 8192) {
    companion object { private const val NC = 0.toChar() }
    private val buf = ByteArray(bufCap)
    private var bId = 0
    private var size = 0
    private var c = NC
    private val char: Char
        get() {
            while (bId == size) { size = input.read(buf); if (size == -1) return NC; bId = 0 }
            return buf[bId++].toInt().toChar()
        }
    private fun isWhitespace(c: Char) = c.code !in 33..126
    private fun skip(): Char { var b: Char; while (char.also { b = it } != NC && isWhitespace(b)); return b }
    fun ns() = buildString {
        while (true) { c = char; if (!isWhitespace(c)) break }; append(c);
        while (true) { c = char; if (isWhitespace(c)) break; append(c) }
    }
    fun ns(n: Int): CharArray {
        val buf = CharArray(n); var (b, p) = skip() to 0
        while (p < n && !isWhitespace(b)) { buf[p++] = b;b = char }
        return if (n == p) buf else buf.copyOf(p)
    }
    fun ni(): Int {
        var neg = false; if (c == NC) c = char
        while (c < '0' || c > '9') { if (c == '-') neg = true;c = char }
        var res = 0; while (c in '0'..'9') { res = (res shl 3) + (res shl 1) + (c - '0'); c = char }
        return if (neg) -res else res
    }
    fun nl(): Long {
        var neg = false; if (c == NC) c = char
        while (c < '0' || c > '9') { if (c == '-') neg = true; c = char }
        var res = 0L; while (c in '0'..'9') { res = (res shl 3) + (res shl 1) + (c - '0'); c = char }
        return if (neg) -res else res
    }
    fun na(n: Int) = IntArray(n) { ni() }; fun nal(n: Int) = LongArray(n) { nl() }; fun nad(n: Int) = DoubleArray(n) { nd() }
    fun nm(n: Int, m: Int) = Array(n) { ns(m) }; fun nmi(n: Int, m: Int) = Array(n) { na(m) }
    fun nd() = ns().toDouble(); fun nc() = skip()
}
open class FastWriter : Closeable {
    private val writer: PrintWriter
    constructor(output: OutputStream, bufCap: Int = 8192) {
        this.writer = PrintWriter(BufferedWriter(OutputStreamWriter(output), bufCap))
    }
    constructor(writer: Writer, bufCap: Int = 8192) {
        this.writer = PrintWriter(BufferedWriter(writer, bufCap))
    }
    override fun close() { writer.flush(); try { writer.close() } catch (e: Exception) { e.printStackTrace() } }
    fun print(b: Boolean) = writer.print(b); fun print(c: Char) = writer.print(c); fun print(i: Int) = writer.print(i)
    fun print(l: Long) = writer.print(l); fun print(f: Float) = writer.print(f); fun print(d: Double) = writer.print(d)
    fun print(s: CharArray) = writer.print(s); fun print(s: String?) = writer.print(s);
    fun print(obj: Any?) = writer.print(obj)
    fun println() = writer.println(); fun println(x: Boolean) = writer.println(x); fun println(x: Char) = writer.println(x)
    fun println(x: Int) = writer.println(x); fun println(x: Long) = writer.println(x); fun println(x: Float) = writer.println(x)
    fun println(x: Double) = writer.println(x); fun println(x: CharArray) = writer.println(x); fun println(x: String) = writer.println(x)
    fun println(x: Any) = writer.println(x)
    fun printf(format: String, vararg args: Any?) = writer.format(format, *args)
    fun flush() = writer.flush()
}
inline fun <reified T> ar(size: Int, init: (Int) -> T) = Array(size) { init(it) }
typealias boolean = Boolean
typealias int = Int
typealias long = Long
inline fun lar(size: Int, init: (Int) -> Long = { 0L }) = LongArray(size) { init(it) }

/**
 * generated by kotlincputil@tauros
 */
private val bufCap = 65536
private val rd = FastReader(System.`in`, bufCap)
private val wt = FastWriter(System.out, bufCap)
private fun solve() {
    // https://codeforces.com/problemset/problem/855/E
    // leading=false和limit=false的状态可以缓存下来
    // 每次询问计算时只用计算limit=true和leading=true的状态
    // b=2的时候1e18有60位，最大mask=3
    // ...
    // b=10的时候1e18有19位，最大mask=1023
    // 记忆化的总状态数不是很多的，可以统一记忆化，记忆化时需要从高位到低位来记忆化
    val cap = 1e18.toLong()
    val mem = ar(11) { b ->
        if (b < 2) ar(0) { lar(0) } else {
            val len = cap.toString(b).length
            ar(len) { lar(1 shl b) { -1 } }
        }
    }
    fun calc(num: long, b: int): long {
        val dp = mem[b]
        val posMax = num.toString(b).reversed().map { it - '0' }.toIntArray()
        val len = posMax.size
        fun dfs(pos: int = len - 1, mask: int = 0, limit: boolean = true, leading: boolean = true): long {
            if (pos < 0) {
                return if (mask == 0 && !leading) 1 else 0
            }
            if (!leading && !limit && dp[pos][mask] != -1L) return dp[pos][mask]
            var res = 0L
            for (i in 0 .. if (limit) posMax[pos] else b - 1) {
                res += dfs(
                    pos - 1,
                    if (!leading || i > 0) 1 shl i xor mask else mask,
                    limit && i == posMax[pos], leading && i == 0
                )
            }
            if (!leading && !limit) dp[pos][mask] = res
            return res
        }
        return dfs()
    }

    val q = rd.ni()
    repeat(q) {
        val b = rd.ni()
        val (l, r) = rd.nal(2)
        val ans = calc(r, b) - calc(l - 1, b)
        wt.println(ans)
    }
}
fun main(args: Array<String>) {
    solve()
    wt.flush()
}