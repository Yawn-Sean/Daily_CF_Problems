/*
尽量把负数变成正数
-1 -1 1 -1 -1
左 3 个和右 3 个分别操作一下，中间的就可以在不变号的情况下实现全都变成正数
感觉总操作次数不会太多
最后相当于每个数 * (-1)^k，然后所有 k 加起来应该是 n 的倍数

进行两次操作，能有多少和之前一样？
1 2 3 4 5
-1 -2 -3 4 5
-1 2 3 -4 5

1 2 3 4 5 6 7
-1 -2 -3 -4 5 6 7
-1 -2 3 4 -5 -6 7
继续呢？
1 -2 3 4 5
-1 2 -3 4 5

1 2 -3 4 5 -6 7

进行偶数次操作，只能有奇数个数和之前一样，偶数个和之前不一样


进行一次操作，能有多少和之前一样？
1 2 3 4 5 6 7
-1 -2 -3 -4 5 6 7
进行奇数次操作，则和之前一样的数的个数和 (n - 1) 奇偶性相同
-1 -2 -3 -4 5 -6 -7(3 次)
1 2 3 4 5 -6 -7
1 2 3 -4 -5 6 7(5 次)
1 2 -3 -4 5 -6 -7
1 2 3 4 5 6 7(7 次) 

所以只需讨论最终做了奇数次还是偶数次操作即可，然后分别计算
进行偶数次操作其实就是看哪 1/3/5/7... 个和之前一样
dp[i][j]: 前 i 个数，j 个和之前一样的最大和
*/

int T;
int a[N], n, m;
int dp[N][N];

void solve1() {
    cin >> n;
    m = 2 * n - 1;
    for (int i = 1; i <= m; i++) {
        cin >> a[i];
    }
    
    for (int i = 0; i <= m; i++) {
        for (int j = 0; j <= m; j++) {
            dp[i][j] = -INF;
        }
    }
    dp[0][0] = 0;
    for (int i = 1; i <= m; i++) {
        dp[i][0] = dp[i - 1][0] - a[i];
        for (int j = 1; j <= i; j++) {
            dp[i][j] = max(dp[i - 1][j] - a[i], dp[i - 1][j - 1] + a[i]);
        }
    }
    
    int res = -INF;
    for (int i = 1; i <= m; i += 2) {
        res = max(res, dp[m][i]);
    }
    if ((n - 1) % 2 == 0) {
        for (int i = 0; i <= m; i += 2) {
            res = max(res, dp[m][i]);
        }
    }
    cout << res << "\n";
}           